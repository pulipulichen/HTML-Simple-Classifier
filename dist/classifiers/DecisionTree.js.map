{"version":3,"sources":["webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.yaml","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/style.less","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.less","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.html?5d61","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.less?459c","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.html","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.js?b956","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.less?36f7","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.vue","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.yaml?93ce","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTreeMethodsBuild.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTreeMethodsShow.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/decision-tree.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/decision-tree.webpack.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/style.less?c8bf"],"names":[],"mappings":"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U;AAC1B,EAAE,iFAAM;AACR,EAAE,oGAAM;AACR,EAAE,6GAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACsQ;AACtQ,WAAW,uRAAM,iBAAiB,+RAAM;;AAExC;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gF;;;;;;;;;;;;AC3Cf;AAAA;AAAA;AAAA;AAAqU,CAAgB,uYAAG,EAAC,C;;;;;;;;;;;;ACAzV;AAAA;AAAiE;;AAElD;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,uFAAE;AACjB;;AAEA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;ACrIA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,C;;;;;;;;;;;;AC7BA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kCAAkC,QAAQ;AAC1C;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;;AAErB,wCAAwC,QAAQ;AAChD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,KAAK,wCAAwC,QAAQ;;;;AAIrD;AACA;AACA,cAAc;AACd;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAEc,iE;;;;;;;;;;;;AC9df;AAAA;AAAA;AAAA;AAAmC;AACd;;AAEN,wH;;;;;;;;;;;ACHf;;AAEA;AACA,cAAc,mBAAO,CAAC,iUAAiJ;AACvK;AACA,4CAA4C,QAAS;AACrD;AACA;AACA,UAAU,mBAAO,CAAC,sIAAyE;AAC3F,+CAA+C;AAC/C;AACA,GAAG,KAAU,EAAE,E","file":"classifiers/DecisionTree.js","sourcesContent":["module.exports = function (Component) {\n  Component.options.__i18n = Component.options.__i18n || []\n  Component.options.__i18n.push('{\"en\":{\"TEST_MESSAGE\":\"Test Message\"},\"zh-TW\":{\"TEST_MESSAGE\":\"測試訊息\"}}')\n  delete Component.options._Ctor\n}\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \"/*\\n Transforming nested lists to pretty tree\\n \\n <div class=\\\"tree\\\">\\n    <ul>\\n        <li>\\n            <ul>\\n            ...\\n            </ul>\\n        </li>\\n        ...\\n    </ul>\\n </div>\\n \\nSource: http://thecodeplayer.com/walkthrough/css3-family-tree\\n\\nSome other advices about displaying trees: http://stackoverflow.com/questions/1695115/how-do-i-draw-the-lines-of-a-family-tree-using-html-css\\n*/\\n.decision-tree-container {\\n  /*We will use ::before and ::after to draw the connectors*/\\n  /*We need to remove left-right connectors from elements without\\n   any siblings*/\\n  /*Remove space from the top of single children*/\\n  /*Remove left connector from first child and\\n   right connector from last child*/\\n  /*Adding back the vertical connector to the last nodes*/\\n  /*Time to add downward connectors from parents*/\\n  /*Time for some hover effects*/\\n  /*We will apply the hover effect the the lineage of the element also*/\\n  /*Connector styles on hover*/\\n  /*Thats all. I hope you enjoyed it.\\n   Thanks :)*/\\n}\\n.decision-tree-container * {\\n  margin: 0;\\n  padding: 0;\\n}\\n.decision-tree-container .tree ul {\\n  padding-top: 20px;\\n  position: relative;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li {\\n  white-space: nowrap;\\n  float: left;\\n  text-align: center;\\n  list-style-type: none;\\n  position: relative;\\n  padding: 20px 5px 0 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li::before,\\n.decision-tree-container .tree li::after {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  right: 50%;\\n  border-top: 1px solid #ccc;\\n  width: 50%;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li::after {\\n  right: auto;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n}\\n.decision-tree-container .tree li:only-child::after,\\n.decision-tree-container .tree li:only-child::before {\\n  display: none;\\n}\\n.decision-tree-container .tree li:only-child {\\n  padding-top: 0;\\n}\\n.decision-tree-container .tree li:first-child::before,\\n.decision-tree-container .tree li:last-child::after {\\n  border: 0 none;\\n}\\n.decision-tree-container .tree li:last-child::before {\\n  border-right: 1px solid #ccc;\\n  border-radius: 0 5px 0 0;\\n  -webkit-border-radius: 0 5px 0 0;\\n  -moz-border-radius: 0 5px 0 0;\\n}\\n.decision-tree-container .tree li:first-child::after {\\n  border-radius: 5px 0 0 0;\\n  -webkit-border-radius: 5px 0 0 0;\\n  -moz-border-radius: 5px 0 0 0;\\n}\\n.decision-tree-container .tree ul ul::before {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n  width: 0;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li a {\\n  border: 1px solid #ccc;\\n  padding: 5px 10px;\\n  text-decoration: none;\\n  color: #666;\\n  font-family: arial, verdana, tahoma;\\n  font-size: 11px;\\n  display: inline-block;\\n  border-radius: 5px;\\n  -webkit-border-radius: 5px;\\n  -moz-border-radius: 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li a:hover,\\n.decision-tree-container .tree li a:hover + ul li a {\\n  background: #c8e4f8;\\n  color: #000;\\n  border: 1px solid #94a0b4;\\n}\\n.decision-tree-container .tree li a:hover + ul li::after,\\n.decision-tree-container .tree li a:hover + ul li::before,\\n.decision-tree-container .tree li a:hover + ul::before,\\n.decision-tree-container .tree li a:hover + ul ul::before {\\n  border-color: #94a0b4;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"style.less\",\"/media/pudding/DATA/pudding/Code-Porjects/html-api/HTML-Simple-Classifier/src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/style.less\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;;;CAiBC;ACED;EDAE,0DAA0D;EAC1D;gBACc;EACd,+CAA+C;EAC/C;mCACiC;EACjC,uDAAuD;EACvD,+CAA+C;EAC/C,8BAA8B;EAC9B,qEAAqE;EACrE,4BAA4B;EAC5B;aACW;AACb;ACbA;EAGM,SAAA;EACA,UAAA;ADaN;ACjBA;EAQI,iBAAA;EACE,kBAAA;EAEF,oBAAA;EACA,4BAAA;EACA,yBAAA;ADWJ;ACxBA;EAiBM,mBAAA;EACF,WAAA;EACE,kBAAA;EACF,qBAAA;EACA,kBAAA;EACA,uBAAA;EAEA,oBAAA;EACA,4BAAA;EACA,yBAAA;ADSJ;ACnCA;;EAgCI,WAAA;EACA,kBAAA;EACE,MAAA;EACA,UAAA;EACF,0BAAA;EACA,UAAA;EACE,YAAA;ADON;AC7CA;EAyCI,WAAA;EACE,SAAA;EACF,2BAAA;ADOJ;AClDA;;EAiDI,aAAA;ADKJ;ACtDA;EAsDM,cAAA;ADGN;ACzDA;;EA4DI,cAAA;ADCJ;AC7DA;EAgEI,4BAAA;EACA,wBAAA;EACA,gCAAA;EACA,6BAAA;ADAJ;ACnEA;EAsEI,wBAAA;EACA,gCAAA;EACA,6BAAA;ADAJ;ACxEA;EA6EI,WAAA;EACA,kBAAA;EACE,MAAA;EACA,SAAA;EACF,2BAAA;EACA,QAAA;EACE,YAAA;ADFN;ACjFA;EAuFI,sBAAA;EACA,iBAAA;EACA,qBAAA;EACA,WAAA;EACA,mCAAA;EACA,eAAA;EACA,qBAAA;EAEA,kBAAA;EACA,0BAAA;EACA,uBAAA;EAEA,oBAAA;EACA,4BAAA;EACA,yBAAA;ADLJ;AChGA;;EA2GI,mBAAA;EACE,WAAA;EACA,yBAAA;ADPN;ACtGA;;;;EAoHI,qBAAA;ADRJ\",\"file\":\"style.less\",\"sourcesContent\":[\"/*\\n Transforming nested lists to pretty tree\\n \\n <div class=\\\"tree\\\">\\n    <ul>\\n        <li>\\n            <ul>\\n            ...\\n            </ul>\\n        </li>\\n        ...\\n    </ul>\\n </div>\\n \\nSource: http://thecodeplayer.com/walkthrough/css3-family-tree\\n\\nSome other advices about displaying trees: http://stackoverflow.com/questions/1695115/how-do-i-draw-the-lines-of-a-family-tree-using-html-css\\n*/\\n.decision-tree-container {\\n  /*We will use ::before and ::after to draw the connectors*/\\n  /*We need to remove left-right connectors from elements without\\n   any siblings*/\\n  /*Remove space from the top of single children*/\\n  /*Remove left connector from first child and\\n   right connector from last child*/\\n  /*Adding back the vertical connector to the last nodes*/\\n  /*Time to add downward connectors from parents*/\\n  /*Time for some hover effects*/\\n  /*We will apply the hover effect the the lineage of the element also*/\\n  /*Connector styles on hover*/\\n  /*Thats all. I hope you enjoyed it.\\n   Thanks :)*/\\n}\\n.decision-tree-container * {\\n  margin: 0;\\n  padding: 0;\\n}\\n.decision-tree-container .tree ul {\\n  padding-top: 20px;\\n  position: relative;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li {\\n  white-space: nowrap;\\n  float: left;\\n  text-align: center;\\n  list-style-type: none;\\n  position: relative;\\n  padding: 20px 5px 0 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li::before,\\n.decision-tree-container .tree li::after {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  right: 50%;\\n  border-top: 1px solid #ccc;\\n  width: 50%;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li::after {\\n  right: auto;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n}\\n.decision-tree-container .tree li:only-child::after,\\n.decision-tree-container .tree li:only-child::before {\\n  display: none;\\n}\\n.decision-tree-container .tree li:only-child {\\n  padding-top: 0;\\n}\\n.decision-tree-container .tree li:first-child::before,\\n.decision-tree-container .tree li:last-child::after {\\n  border: 0 none;\\n}\\n.decision-tree-container .tree li:last-child::before {\\n  border-right: 1px solid #ccc;\\n  border-radius: 0 5px 0 0;\\n  -webkit-border-radius: 0 5px 0 0;\\n  -moz-border-radius: 0 5px 0 0;\\n}\\n.decision-tree-container .tree li:first-child::after {\\n  border-radius: 5px 0 0 0;\\n  -webkit-border-radius: 5px 0 0 0;\\n  -moz-border-radius: 5px 0 0 0;\\n}\\n.decision-tree-container .tree ul ul::before {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n  width: 0;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li a {\\n  border: 1px solid #ccc;\\n  padding: 5px 10px;\\n  text-decoration: none;\\n  color: #666;\\n  font-family: arial, verdana, tahoma;\\n  font-size: 11px;\\n  display: inline-block;\\n  border-radius: 5px;\\n  -webkit-border-radius: 5px;\\n  -moz-border-radius: 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li a:hover,\\n.decision-tree-container .tree li a:hover + ul li a {\\n  background: #c8e4f8;\\n  color: #000;\\n  border: 1px solid #94a0b4;\\n}\\n.decision-tree-container .tree li a:hover + ul li::after,\\n.decision-tree-container .tree li a:hover + ul li::before,\\n.decision-tree-container .tree li a:hover + ul::before,\\n.decision-tree-container .tree li a:hover + ul ul::before {\\n  border-color: #94a0b4;\\n}\\n\",\"/*\\n Transforming nested lists to pretty tree\\n \\n <div class=\\\"tree\\\">\\n    <ul>\\n        <li>\\n            <ul>\\n            ...\\n            </ul>\\n        </li>\\n        ...\\n    </ul>\\n </div>\\n \\nSource: http://thecodeplayer.com/walkthrough/css3-family-tree\\n\\nSome other advices about displaying trees: http://stackoverflow.com/questions/1695115/how-do-i-draw-the-lines-of-a-family-tree-using-html-css\\n*/\\n\\n.decision-tree-container {\\n  \\n  * {\\n      margin: 0;\\n      padding: 0;\\n  }\\n\\n  .tree ul {\\n    padding-top: 20px;\\n      position: relative;\\n\\n    transition: all 0.5s;\\n    -webkit-transition: all 0.5s;\\n    -moz-transition: all 0.5s;\\n  }\\n\\n  .tree li {\\n      white-space: nowrap;\\n    float: left;\\n      text-align: center;\\n    list-style-type: none;\\n    position: relative;\\n    padding: 20px 5px 0 5px;\\n\\n    transition: all 0.5s;\\n    -webkit-transition: all 0.5s;\\n    -moz-transition: all 0.5s;\\n  }\\n\\n  /*We will use ::before and ::after to draw the connectors*/\\n\\n  .tree li::before, .tree li::after{\\n    content: '';\\n    position: absolute;\\n      top: 0;\\n      right: 50%;\\n    border-top: 1px solid #ccc;\\n    width: 50%;\\n      height: 20px;\\n  }\\n  .tree li::after{\\n    right: auto;\\n      left: 50%;\\n    border-left: 1px solid #ccc;\\n  }\\n\\n  /*We need to remove left-right connectors from elements without\\n   any siblings*/\\n  .tree li:only-child::after, .tree li:only-child::before {\\n    display: none;\\n  }\\n\\n  /*Remove space from the top of single children*/\\n  .tree li:only-child{\\n      padding-top: 0;\\n  }\\n\\n  /*Remove left connector from first child and\\n   right connector from last child*/\\n  .tree li:first-child::before, .tree li:last-child::after{\\n    border: 0 none;\\n  }\\n  /*Adding back the vertical connector to the last nodes*/\\n  .tree li:last-child::before{\\n    border-right: 1px solid #ccc;\\n    border-radius: 0 5px 0 0;\\n    -webkit-border-radius: 0 5px 0 0;\\n    -moz-border-radius: 0 5px 0 0;\\n  }\\n  .tree li:first-child::after{\\n    border-radius: 5px 0 0 0;\\n    -webkit-border-radius: 5px 0 0 0;\\n    -moz-border-radius: 5px 0 0 0;\\n  }\\n\\n  /*Time to add downward connectors from parents*/\\n  .tree ul ul::before{\\n    content: '';\\n    position: absolute;\\n      top: 0;\\n      left: 50%;\\n    border-left: 1px solid #ccc;\\n    width: 0;\\n      height: 20px;\\n  }\\n\\n  .tree li a{\\n    border: 1px solid #ccc;\\n    padding: 5px 10px;\\n    text-decoration: none;\\n    color: #666;\\n    font-family: arial, verdana, tahoma;\\n    font-size: 11px;\\n    display: inline-block;\\n\\n    border-radius: 5px;\\n    -webkit-border-radius: 5px;\\n    -moz-border-radius: 5px;\\n\\n    transition: all 0.5s;\\n    -webkit-transition: all 0.5s;\\n    -moz-transition: all 0.5s;\\n  }\\n\\n  /*Time for some hover effects*/\\n  /*We will apply the hover effect the the lineage of the element also*/\\n  .tree li a:hover, .tree li a:hover+ul li a {\\n    background: #c8e4f8;\\n      color: #000;\\n      border: 1px solid #94a0b4;\\n  }\\n  /*Connector styles on hover*/\\n  .tree li a:hover+ul li::after,\\n  .tree li a:hover+ul li::before,\\n  .tree li a:hover+ul::before,\\n  .tree li a:hover+ul ul::before{\\n    border-color:  #94a0b4;\\n  }\\n\\n  /*Thats all. I hope you enjoyed it.\\n   Thanks :)*/\\n}\\n\"]}]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"DecisionTree.less\"}]);\n// Exports\nmodule.exports = exports;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"DecisionTree\" }, [\n    _c(\"div\", { staticClass: \"ui field\" }, [\n      _c(\n        \"button\",\n        {\n          staticClass: \"ui primary fluid button\",\n          class: { disabled: !_vm.$parent.isNeedPredict },\n          attrs: { type: \"button\" },\n          on: { click: _vm.start }\n        },\n        [\n          !_vm.isModelBuilded\n            ? [\n                _vm._v(\n                  \"\\r\\n        \" +\n                    _vm._s(_vm.$t(\"Build Model and Predict\")) +\n                    \"\\r\\n      \"\n                )\n              ]\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm.isModelBuilded\n            ? [\n                _vm._v(\n                  \"\\r\\n        \" + _vm._s(_vm.$t(\"Predict\")) + \"\\r\\n      \"\n                )\n              ]\n            : _vm._e()\n        ],\n        2\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm.isModelBuilded\n      ? _c(\"div\", { staticClass: \"ui field\" }, [\n          _c(\n            \"button\",\n            {\n              staticClass: \"ui primary fluid button\",\n              attrs: { type: \"button\" },\n              on: { click: _vm.showModel }\n            },\n            [_vm._v(\"\\r\\n      \" + _vm._s(_vm.$t(\"Show Model\")) + \"\\r\\n    \")]\n          )\n        ])\n      : _vm._e()\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5e0e0496\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\", function() {\n     var newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\");\n     if(newContent.__esModule) newContent = newContent.default;\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","export * from \"-!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./DecisionTree.html?vue&type=template&id=6c7ee0fe&scoped=true&\"","let DecisionTree = {\r\n  props: ['config', 'localConfig', 'utils'],\r\n  data () {    \r\n    this.$i18n.locale = this.localConfig.locale\r\n    return {\r\n      model: null\r\n    }\r\n  },\r\n  watch: {\r\n    'localConfig.locale'() {\r\n      this.$i18n.locale = this.localConfig.locale;\r\n    },\r\n  },\r\n  computed: {\r\n    isModelBuilded () {\r\n      return (this.localConfig.modelJSON !== null && this.localConfig.modelJSON !== '{}')\r\n    },\r\n    modelCSSURL () {\r\n      let currentURL = location.href\r\n      return currentURL.slice(0, currentURL.lastIndexOf('/') + 1)\r\n        + 'assets/classifiers/DecisionTree/style.css'\r\n    }\r\n  },\r\n  mounted() {\r\n//    setTimeout(() => {\r\n//      this.start()\r\n//    }, 1000)\r\n  },\r\n  methods: {}\r\n}\r\n\r\nimport DecisionTreeMethodsBuild from './DecisionTreeMethodsBuild.js'\r\nDecisionTreeMethodsBuild(DecisionTree)\r\n\r\nimport DecisionTreeMethodsShow from './DecisionTreeMethodsShow.js'\r\nDecisionTreeMethodsShow(DecisionTree)\r\n\r\nexport default DecisionTree","import mod from \"-!./DecisionTree.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!./DecisionTree.js?vue&type=script&lang=js&\"","export * from \"-!../../../../node_modules/vue-style-loader/index.js!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\"","import { render, staticRenderFns } from \"./DecisionTree.html?vue&type=template&id=6c7ee0fe&scoped=true&\"\nimport script from \"./DecisionTree.js?vue&type=script&lang=js&\"\nexport * from \"./DecisionTree.js?vue&type=script&lang=js&\"\nimport style0 from \"./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6c7ee0fe\",\n  null\n  \n)\n\n/* custom blocks */\nimport block0 from \"./DecisionTree.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fmedia%2Fpudding%2FDATA%2Fpudding%2FCode-Porjects%2Fhtml-api%2FHTML-Simple-Classifier%2Fsrc%2Fcomponents%2FConfigurationPanel%2FDecisionTree%2FDecisionTree.vue&lang=yaml\"\nif (typeof block0 === 'function') block0(component)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/media/pudding/DATA/pudding/Code-Porjects/html-api/HTML-Simple-Classifier/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6c7ee0fe')) {\n      api.createRecord('6c7ee0fe', component.options)\n    } else {\n      api.reload('6c7ee0fe', component.options)\n    }\n    module.hot.accept(\"./DecisionTree.html?vue&type=template&id=6c7ee0fe&scoped=true&\", function () {\n      api.rerender('6c7ee0fe', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/ConfigurationPanel/DecisionTree/DecisionTree.vue\"\nexport default component.exports","import mod from \"-!../../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DecisionTree.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fmedia%2Fpudding%2FDATA%2Fpudding%2FCode-Porjects%2Fhtml-api%2FHTML-Simple-Classifier%2Fsrc%2Fcomponents%2FConfigurationPanel%2FDecisionTree%2FDecisionTree.vue&lang=yaml\"; export default mod; export * from \"-!../../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DecisionTree.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fmedia%2Fpudding%2FDATA%2Fpudding%2FCode-Porjects%2Fhtml-api%2FHTML-Simple-Classifier%2Fsrc%2Fcomponents%2FConfigurationPanel%2FDecisionTree%2FDecisionTree.vue&lang=yaml\"","import dt from './vendors/decision-tree/decision-tree.webpack.js'\r\n\r\nexport default function (DecisionTree) {\r\n  DecisionTree.methods.startPredict = async function () {\r\n    return await this.start()\r\n  }\r\n    \r\n  DecisionTree.methods.start = async function () {\r\n    //this.localConfig.modelJSON = null\r\n    this.config.loadingProgress = 0\r\n    console.log('start', 1)\r\n    let data = await this.$parent.getJSONData()\r\n    console.log(data)\r\n    this.config.loadingProgress = 0.25\r\n    \r\n    console.log('start', 2)\r\n    //console.log(data.trainSet[0])\r\n    \r\n    \r\n    if (this.isModelBuilded === false) {\r\n      console.log('start', 3)\r\n      this.model = this.buildModel(data.trainSet)\r\n      \r\n      console.log('start', 4)\r\n      await this.model.waitReady()\r\n      //console.log(model.root)\r\n      console.log('start', 5)\r\n      this.localConfig.modelJSON = JSON.stringify(this.model.root)\r\n      //console.log(JSON.parse(this.localConfig.modelJSON))\r\n    }\r\n    else {\r\n      console.log('start', 6)\r\n      this.model = this.buildModel([])\r\n      console.log('start', 7)\r\n      await this.model.waitReady()\r\n      this.model.category = this.localConfig.classFieldName\r\n      this.model.root = JSON.parse(this.localConfig.modelJSON)\r\n      //console.log(model.root, this.localConfig.modelJSON)\r\n      console.log('start', 8)\r\n    }\r\n    //console.error('需要只Predict test case')\r\n    \r\n    this.config.loadingProgress = 0.5\r\n    \r\n    console.log('start', 9)\r\n    //console.log(data.testSet)\r\n    let predictResults = await this.getPredictResults(this.model, data.testSet)\r\n    console.log(predictResults)\r\n    if (predictResults[0] === 'undefined') {\r\n      this.config.loadingProgress = 1\r\n      console.error('predict is undefined')\r\n      return false\r\n    }\r\n    \r\n    console.log('start', 10)\r\n    this.config.loadingProgress = 0.75\r\n    \r\n    if (this.$parent.hasModelEvaluated === false) {\r\n      this.evaluationResults(data, predictResults)\r\n    }\r\n    \r\n    //console.log(predictResults)\r\n    this.$parent.setPredictResults(predictResults)\r\n    \r\n    this.config.loadingProgress = 0.9\r\n    \r\n    if (this.$parent.isModelWindowOpened) {\r\n      this.showModel()\r\n    }\r\n    \r\n    this.config.loadingProgress = 1\r\n    this.config.modelBuildedTime = (new Date()).getTime()\r\n  }\r\n  \r\n  DecisionTree.methods.buildModel = function (trainSet) {\r\n    // Configuration\r\n    var config = {\r\n      trainingSet: trainSet, \r\n      categoryAttr: this.localConfig.classFieldName, \r\n      //ignoredAttributes: ['person']\r\n    };\r\n    \r\n    // Building Decision Tree\r\n    return new dt.DecisionTree(config);\r\n  }\r\n  \r\n  DecisionTree.methods.getPredictResults = async function (model, testSet) {\r\n    let results = []\r\n    //console.log(model.root)\r\n    for (let len = testSet.length, i = len; i > 0; i--) {\r\n      let testCase = testSet[(len - i)]\r\n      \r\n      let result\r\n      if (this.utils.DataUtils.isMissingData(testCase['predict']) === false) {\r\n        result = testCase['predict']\r\n      }\r\n      else {\r\n        //console.log(testCase)\r\n        //console.log(model.root)\r\n        result = await model.predict(testCase)\r\n        //console.log(result)\r\n      }\r\n        \r\n      results.push(result)\r\n      \r\n      if (i % 10 === 5) {\r\n        await this.utils.AsyncUtils.sleep(0)\r\n      }\r\n    }\r\n    \r\n    return results\r\n  }\r\n  \r\n  DecisionTree.methods.evaluationResults = async function (data, predictResults) {\r\n    let getTrainSetPredicts = await this.$parent.getTrainSetPredicts(predictResults, data.testSetRowIndexes)\r\n    //console.log(data.trainSetClasses)\r\n    //console.log(getTrainSetPredicts)\r\n\r\n    this.$parent.resetModelEvaluation()\r\n\r\n    //console.log(data.trainSetClasses.length, getTrainSetPredicts.length, data.testSetRowIndexes.length)\r\n\r\n    let accuracy = await this.$parent.calcAccuracy(data.trainSetClasses, getTrainSetPredicts)\r\n    //console.log(accuracy)\r\n    let accuracyInfo = {\r\n      name: 'accuracy',\r\n      type: 'percent',\r\n      value: accuracy\r\n    }\r\n    \r\n    //console.log(accuracyInfo)\r\n    this.localConfig.modelEvaluations.push(accuracyInfo)\r\n  }\r\n}","export default function (DecisionTree) {\r\n  DecisionTree.methods.showModel = async function () {\r\n    if (!this.model) {\r\n      await this.start()\r\n      //console.error('no this.model')\r\n      //return false\r\n    }\r\n    //console.log('ok')\r\n    //console.log(this.model)\r\n    let bodyHTML = await this.model.treeToHtml()\r\n    //console.log('ok2')\r\n    bodyHTML = `<div class=\"tree\">${bodyHTML}</div>`\r\n    //console.error('[TODO]')\r\n    //console.log()\r\n    let title = this.$t('Decision Tree') + ` (` + (new Date()).mmddhhmm() + ')'\r\n    \r\n    let modelWindow = this.utils.PopupUtils.open({\r\n      windowName: 'DecisionTreeModelShow' + this.config.modelBuildedTime,\r\n      cssURL: this.modelCSSURL,\r\n      bodyHTML,\r\n      size: 'right',\r\n      //size: 'left',\r\n      title\r\n    })\r\n\r\n    modelWindow.scrollToTop()\r\n    modelWindow.scrollToCenter()\r\n    \r\n  }\r\n}","var dt = (function () {\r\n\r\n  /**\r\n   * Creates an instance of DecisionTree\r\n   *\r\n   * @constructor\r\n   * @param builder - contains training set and\r\n   *                  some configuration parameters\r\n   */\r\n  function DecisionTree(builder) {\r\n    (async () => {\r\n      this.inited = false\r\n      //console.log('準備')\r\n      this.root = await buildDecisionTree({\r\n        trainingSet: builder.trainingSet,\r\n        ignoredAttributes: arrayToHashSet(builder.ignoredAttributes),\r\n        categoryAttr: builder.categoryAttr || 'category',\r\n        minItemsCount: builder.minItemsCount || 1,\r\n        entropyThrehold: builder.entropyThrehold || 0.01,\r\n        maxTreeDepth: builder.maxTreeDepth || 70\r\n      })\r\n      //console.log('完成')\r\n      this.inited = true\r\n    })()\r\n  }\r\n\r\n  DecisionTree.prototype.waitReady = async function () {\r\n    //console.log(item)\r\n    while (this.inited === false) {\r\n      await sleep(50)\r\n    }\r\n    return true\r\n  }\r\n\r\n  DecisionTree.prototype.predict = async function (item) {\r\n    //console.log(item)\r\n    await this.waitReady()\r\n    //console.log(item)\r\n    return predict(this.root, item);\r\n  }\r\n\r\n  DecisionTree.prototype.treeToHtml = async function (tree) {\r\n    //console.log('pl')\r\n    \r\n    //let tree = this.root\r\n    if (!tree) {\r\n      tree = this.root\r\n    }\r\n    \r\n    // only leafs containing category\r\n    if (tree.category) {\r\n      return  ['<ul>',\r\n        '<li>',\r\n        '<a href=\"#\">',\r\n        '<b>', tree.category, '</b>',\r\n        '</a>',\r\n        '</li>',\r\n        '</ul>'].join('');\r\n    }\r\n\r\n    await sleep(0)\r\n    return  ['<ul>',\r\n      '<li>',\r\n      '<a href=\"#\">',\r\n      '<b>', tree.attribute, ' ', tree.predicateName, ' ', tree.pivot, ' ?</b>',\r\n      '</a>',\r\n      '<ul>',\r\n      '<li>',\r\n      '<a href=\"#\">yes</a>',\r\n      await this.treeToHtml(tree.match),\r\n      '</li>',\r\n      '<li>',\r\n      '<a href=\"#\">no</a>',\r\n      await this.treeToHtml(tree.notMatch),\r\n      '</li>',\r\n      '</ul>',\r\n      '</li>',\r\n      '</ul>'].join('');\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of RandomForest\r\n   * with specific number of trees\r\n   *\r\n   * @constructor\r\n   * @param builder - contains training set and some\r\n   *                  configuration parameters for\r\n   *                  building decision trees\r\n   */\r\n  function RandomForest(builder, treesNumber) {\r\n    this.trees = buildRandomForest(builder, treesNumber);\r\n  }\r\n\r\n  RandomForest.prototype.predict = function (item) {\r\n    return predictRandomForest(this.trees, item);\r\n  }\r\n\r\n  /**\r\n   * Transforming array to object with such attributes \r\n   * as elements of array (afterwards it can be used as HashSet)\r\n   */\r\n  function arrayToHashSet(array) {\r\n    var hashSet = {};\r\n    if (array) {\r\n      for (var i in array) {\r\n        var attr = array[i];\r\n        hashSet[attr] = true;\r\n      }\r\n    }\r\n    return hashSet;\r\n  }\r\n\r\n  /**\r\n   * Calculating how many objects have the same \r\n   * values of specific attribute.\r\n   *\r\n   * @param items - array of objects\r\n   *\r\n   * @param attr  - variable with name of attribute, \r\n   *                which embedded in each object\r\n   */\r\n  function countUniqueValues(items, attr) {\r\n    var counter = {};\r\n\r\n    // detecting different values of attribute\r\n    for (var i = items.length - 1; i >= 0; i--) {\r\n      // items[i][attr] - value of attribute\r\n      counter[items[i][attr]] = 0;\r\n    }\r\n\r\n    // counting number of occurrences of each of values\r\n    // of attribute\r\n    for (var i = items.length - 1; i >= 0; i--) {\r\n      counter[items[i][attr]] += 1;\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  /**\r\n   * Calculating entropy of array of objects \r\n   * by specific attribute.\r\n   *\r\n   * @param items - array of objects\r\n   *\r\n   * @param attr  - variable with name of attribute, \r\n   *                which embedded in each object\r\n   */\r\n  function entropy(items, attr) {\r\n    // counting number of occurrences of each of values\r\n    // of attribute\r\n    var counter = countUniqueValues(items, attr);\r\n\r\n    var entropy = 0;\r\n    var p;\r\n    for (var i in counter) {\r\n      p = counter[i] / items.length;\r\n      entropy += -p * Math.log(p);\r\n    }\r\n\r\n    return entropy;\r\n  }\r\n\r\n  /**\r\n   * Splitting array of objects by value of specific attribute, \r\n   * using specific predicate and pivot.\r\n   *\r\n   * Items which matched by predicate will be copied to \r\n   * the new array called 'match', and the rest of the items \r\n   * will be copied to array with name 'notMatch'\r\n   *\r\n   * @param items - array of objects\r\n   *\r\n   * @param attr  - variable with name of attribute,\r\n   *                which embedded in each object\r\n   *\r\n   * @param predicate - function(x, y) \r\n   *                    which returns 'true' or 'false'\r\n   *\r\n   * @param pivot - used as the second argument when \r\n   *                calling predicate function:\r\n   *                e.g. predicate(item[attr], pivot)\r\n   */\r\n  function split(items, attr, predicate, pivot) {\r\n    var match = [];\r\n    var notMatch = [];\r\n\r\n    var item,\r\n            attrValue;\r\n\r\n    for (var i = items.length - 1; i >= 0; i--) {\r\n      item = items[i];\r\n      attrValue = item[attr];\r\n\r\n      if (predicate(attrValue, pivot)) {\r\n        match.push(item);\r\n      } else {\r\n        notMatch.push(item);\r\n      }\r\n    }\r\n    ;\r\n\r\n    return {\r\n      match: match,\r\n      notMatch: notMatch\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Finding value of specific attribute which is most frequent\r\n   * in given array of objects.\r\n   *\r\n   * @param items - array of objects\r\n   *\r\n   * @param attr  - variable with name of attribute, \r\n   *                which embedded in each object\r\n   */\r\n  function mostFrequentValue(items, attr) {\r\n    // counting number of occurrences of each of values\r\n    // of attribute\r\n    var counter = countUniqueValues(items, attr);\r\n\r\n    var mostFrequentCount = 0;\r\n    var mostFrequentValue;\r\n\r\n    for (var value in counter) {\r\n      if (counter[value] > mostFrequentCount) {\r\n        mostFrequentCount = counter[value];\r\n        mostFrequentValue = value;\r\n      }\r\n    }\r\n    ;\r\n\r\n    return mostFrequentValue;\r\n  }\r\n\r\n  var predicates = {\r\n    '==': function (a, b) {\r\n      return a == b\r\n    },\r\n    '>=': function (a, b) {\r\n      return a >= b\r\n    }\r\n  };\r\n\r\n  function sleep(ms = 500) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Function for building decision tree\r\n   */\r\n  async function buildDecisionTree(builder) {\r\n\r\n    var trainingSet = builder.trainingSet;\r\n    var minItemsCount = builder.minItemsCount;\r\n    var categoryAttr = builder.categoryAttr;\r\n    var entropyThrehold = builder.entropyThrehold;\r\n    var maxTreeDepth = builder.maxTreeDepth;\r\n    var ignoredAttributes = builder.ignoredAttributes;\r\n\r\n    if ((maxTreeDepth === 0) || (trainingSet.length <= minItemsCount)) {\r\n      // restriction by maximal depth of tree\r\n      // or size of training set is to small\r\n      // so we have to terminate process of building tree\r\n      return {\r\n        category: mostFrequentValue(trainingSet, categoryAttr)\r\n      };\r\n    }\r\n\r\n    var initialEntropy = entropy(trainingSet, categoryAttr);\r\n\r\n    if (initialEntropy <= entropyThrehold) {\r\n      // entropy of training set too small\r\n      // (it means that training set is almost homogeneous),\r\n      // so we have to terminate process of building tree\r\n      return {\r\n        category: mostFrequentValue(trainingSet, categoryAttr)\r\n      };\r\n    }\r\n\r\n    // used as hash-set for avoiding the checking of split by rules\r\n    // with the same 'attribute-predicate-pivot' more than once\r\n    var alreadyChecked = {};\r\n\r\n    // this variable expected to contain rule, which splits training set\r\n    // into subsets with smaller values of entropy (produces informational gain)\r\n    var bestSplit = {gain: 0};\r\n\r\n    for (var i = trainingSet.length - 1; i >= 0; i--) {\r\n      var item = trainingSet[i];\r\n\r\n      // iterating over all attributes of item\r\n      for (var attr in item) {\r\n        if ((attr === categoryAttr) || ignoredAttributes[attr]) {\r\n          continue;\r\n        }\r\n\r\n        // let the value of current attribute be the pivot\r\n        var pivot = item[attr];\r\n\r\n        // pick the predicate\r\n        // depending on the type of the attribute value\r\n        var predicateName;\r\n        if (typeof pivot === 'number') {\r\n          predicateName = '>=';\r\n        } else {\r\n          // there is no sense to compare non-numeric attributes\r\n          // so we will check only equality of such attributes\r\n          predicateName = '==';\r\n        }\r\n\r\n        var attrPredPivot = attr + predicateName + pivot;\r\n        if (alreadyChecked[attrPredPivot]) {\r\n          // skip such pairs of 'attribute-predicate-pivot',\r\n          // which been already checked\r\n          continue;\r\n        }\r\n        alreadyChecked[attrPredPivot] = true;\r\n\r\n        var predicate = predicates[predicateName];\r\n\r\n        // splitting training set by given 'attribute-predicate-value'\r\n        var currSplit = split(trainingSet, attr, predicate, pivot);\r\n\r\n        // calculating entropy of subsets\r\n        var matchEntropy = entropy(currSplit.match, categoryAttr);\r\n        var notMatchEntropy = entropy(currSplit.notMatch, categoryAttr);\r\n\r\n        // calculating informational gain\r\n        var newEntropy = 0;\r\n        newEntropy += matchEntropy * currSplit.match.length;\r\n        newEntropy += notMatchEntropy * currSplit.notMatch.length;\r\n        newEntropy /= trainingSet.length;\r\n        var currGain = initialEntropy - newEntropy;\r\n\r\n        if (currGain > bestSplit.gain) {\r\n          // remember pairs 'attribute-predicate-value'\r\n          // which provides informational gain\r\n          bestSplit = currSplit;\r\n          bestSplit.predicateName = predicateName;\r\n          bestSplit.predicate = predicate;\r\n          bestSplit.attribute = attr;\r\n          bestSplit.pivot = pivot;\r\n          bestSplit.gain = currGain;\r\n        }\r\n      }\r\n\r\n      if (i % 10000 === 5095) {\r\n        console.log('buildDecisionTree sleep i', i)\r\n        await sleep(0)\r\n      }\r\n\r\n    } // for (var i = trainingSet.length - 1; i >= 0; i--) {\r\n\r\n\r\n\r\n    if (!bestSplit.gain) {\r\n      // can't find optimal split\r\n      return {category: mostFrequentValue(trainingSet, categoryAttr)};\r\n    }\r\n\r\n    // building subtrees\r\n\r\n    builder.maxTreeDepth = maxTreeDepth - 1;\r\n\r\n    builder.trainingSet = bestSplit.match;\r\n    var matchSubTree = await buildDecisionTree(builder);\r\n\r\n    builder.trainingSet = bestSplit.notMatch;\r\n    var notMatchSubTree = await buildDecisionTree(builder);\r\n\r\n    return {\r\n      attribute: bestSplit.attribute,\r\n      predicate: bestSplit.predicate,\r\n      predicateName: bestSplit.predicateName,\r\n      pivot: bestSplit.pivot,\r\n      match: matchSubTree,\r\n      notMatch: notMatchSubTree,\r\n      matchedCount: bestSplit.match.length,\r\n      notMatchedCount: bestSplit.notMatch.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Classifying item, using decision tree\r\n   */\r\n  function predict(tree, item) {\r\n    var attr,\r\n            value,\r\n            predicate,\r\n            pivot;\r\n\r\n\r\n    if (!tree) {\r\n      return undefined\r\n    }\r\n\r\n    // Traversing tree from the root to leaf\r\n    while (true) {\r\n\r\n      if (tree.category) {\r\n        // only leafs contains predicted category\r\n        return tree.category;\r\n      }\r\n\r\n      attr = tree.attribute;\r\n      value = item[attr];\r\n\r\n      predicate = tree.predicate;\r\n      if (!predicate) {\r\n        //return undefined\r\n        predicate = predicates[tree.predicateName]\r\n      }\r\n      pivot = tree.pivot;\r\n\r\n      // move to one of subtrees\r\n      if (predicate(value, pivot)) {\r\n        tree = tree.match;\r\n      } else {\r\n        tree = tree.notMatch;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Building array of decision trees\r\n   */\r\n  function buildRandomForest(builder, treesNumber) {\r\n    var items = builder.trainingSet;\r\n\r\n    // creating training sets for each tree\r\n    var trainingSets = [];\r\n    for (var t = 0; t < treesNumber; t++) {\r\n      trainingSets[t] = [];\r\n    }\r\n    for (var i = items.length - 1; i >= 0; i--) {\r\n      // assigning items to training sets of each tree\r\n      // using 'round-robin' strategy\r\n      var correspondingTree = i % treesNumber;\r\n      trainingSets[correspondingTree].push(items[i]);\r\n    }\r\n\r\n    // building decision trees\r\n    var forest = [];\r\n    for (var t = 0; t < treesNumber; t++) {\r\n      builder.trainingSet = trainingSets[t];\r\n\r\n      var tree = new DecisionTree(builder);\r\n      forest.push(tree);\r\n    }\r\n    return forest;\r\n  }\r\n\r\n  /**\r\n   * Each of decision tree classifying item\r\n   * ('voting' that item corresponds to some class).\r\n   *\r\n   * This function returns hash, which contains \r\n   * all classifying results, and number of votes \r\n   * which were given for each of classifying results\r\n   */\r\n  function predictRandomForest(forest, item) {\r\n    var result = {};\r\n    for (var i in forest) {\r\n      var tree = forest[i];\r\n      var prediction = tree.predict(item);\r\n      result[prediction] = result[prediction] ? result[prediction] + 1 : 1;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  var exports = {};\r\n  exports.DecisionTree = DecisionTree;\r\n  exports.RandomForest = RandomForest;\r\n  return exports;\r\n})();\r\n\r\nexport default dt","import dt from './decision-tree.js'\r\nimport './style.less'\r\n\r\nexport default dt","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./style.less\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"bfdcd938\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./style.less\", function() {\n     var newContent = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./style.less\");\n     if(newContent.__esModule) newContent = newContent.default;\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}