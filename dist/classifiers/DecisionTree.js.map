{"version":3,"sources":["webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.yaml","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/style.less","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.less","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.html?5d61","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.less?459c","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.html","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.js?b956","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.less?36f7","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.vue","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTree.yaml?745e","webpack:///./src/components/ConfigurationPanel/DecisionTree/DecisionTreeMethods.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/decision-tree.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/decision-tree.webpack.js","webpack:///./src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/style.less?c8bf"],"names":[],"mappings":"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CA;AACA;;AAEA;AACA,eAAe,uFAAE;AACjB;;AAEA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;ACxCA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAsC,QAAQ;AAC9C;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B,gBAAgB;AAC/C,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;;AAEzB,4CAA4C,QAAQ;AACpD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS,wCAAwC,QAAQ;;;;AAIzD;AACA;AACA,oBAAoB;AACpB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAEc,iE;;;;;;;;;;;;ACzaf;AAAA;AAAA;AAAA;AAAmC;AACd;;AAEN,wH;;;;;;;;;;;ACHf;;AAEA;AACA,cAAc,mBAAO,CAAC,iUAAiJ;AACvK;AACA,4CAA4C,QAAS;AACrD;AACA;AACA,UAAU,mBAAO,CAAC,sIAAyE;AAC3F,+CAA+C;AAC/C;AACA,GAAG,KAAU,EAAE,E","file":"classifiers/DecisionTree.js","sourcesContent":["module.exports = function (Component) {\n  Component.options.__i18n = Component.options.__i18n || []\n  Component.options.__i18n.push('{\"en\":{\"TEST_MESSAGE\":\"Test Message\"},\"zh-TW\":{\"TEST_MESSAGE\":\"測試訊息\"}}')\n  delete Component.options._Ctor\n}\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \"/*\\n Transforming nested lists to pretty tree\\n \\n <div class=\\\"tree\\\">\\n    <ul>\\n        <li>\\n            <ul>\\n            ...\\n            </ul>\\n        </li>\\n        ...\\n    </ul>\\n </div>\\n \\nSource: http://thecodeplayer.com/walkthrough/css3-family-tree\\n\\nSome other advices about displaying trees: http://stackoverflow.com/questions/1695115/how-do-i-draw-the-lines-of-a-family-tree-using-html-css\\n*/\\n.decision-tree-container {\\n  /*We will use ::before and ::after to draw the connectors*/\\n  /*We need to remove left-right connectors from elements without\\n   any siblings*/\\n  /*Remove space from the top of single children*/\\n  /*Remove left connector from first child and\\n   right connector from last child*/\\n  /*Adding back the vertical connector to the last nodes*/\\n  /*Time to add downward connectors from parents*/\\n  /*Time for some hover effects*/\\n  /*We will apply the hover effect the the lineage of the element also*/\\n  /*Connector styles on hover*/\\n  /*Thats all. I hope you enjoyed it.\\n   Thanks :)*/\\n}\\n.decision-tree-container * {\\n  margin: 0;\\n  padding: 0;\\n}\\n.decision-tree-container .tree ul {\\n  padding-top: 20px;\\n  position: relative;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li {\\n  white-space: nowrap;\\n  float: left;\\n  text-align: center;\\n  list-style-type: none;\\n  position: relative;\\n  padding: 20px 5px 0 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li::before,\\n.decision-tree-container .tree li::after {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  right: 50%;\\n  border-top: 1px solid #ccc;\\n  width: 50%;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li::after {\\n  right: auto;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n}\\n.decision-tree-container .tree li:only-child::after,\\n.decision-tree-container .tree li:only-child::before {\\n  display: none;\\n}\\n.decision-tree-container .tree li:only-child {\\n  padding-top: 0;\\n}\\n.decision-tree-container .tree li:first-child::before,\\n.decision-tree-container .tree li:last-child::after {\\n  border: 0 none;\\n}\\n.decision-tree-container .tree li:last-child::before {\\n  border-right: 1px solid #ccc;\\n  border-radius: 0 5px 0 0;\\n  -webkit-border-radius: 0 5px 0 0;\\n  -moz-border-radius: 0 5px 0 0;\\n}\\n.decision-tree-container .tree li:first-child::after {\\n  border-radius: 5px 0 0 0;\\n  -webkit-border-radius: 5px 0 0 0;\\n  -moz-border-radius: 5px 0 0 0;\\n}\\n.decision-tree-container .tree ul ul::before {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n  width: 0;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li a {\\n  border: 1px solid #ccc;\\n  padding: 5px 10px;\\n  text-decoration: none;\\n  color: #666;\\n  font-family: arial, verdana, tahoma;\\n  font-size: 11px;\\n  display: inline-block;\\n  border-radius: 5px;\\n  -webkit-border-radius: 5px;\\n  -moz-border-radius: 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li a:hover,\\n.decision-tree-container .tree li a:hover + ul li a {\\n  background: #c8e4f8;\\n  color: #000;\\n  border: 1px solid #94a0b4;\\n}\\n.decision-tree-container .tree li a:hover + ul li::after,\\n.decision-tree-container .tree li a:hover + ul li::before,\\n.decision-tree-container .tree li a:hover + ul::before,\\n.decision-tree-container .tree li a:hover + ul ul::before {\\n  border-color: #94a0b4;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"style.less\",\"D:/xampp/htdocs/projects-html5/HTML-Simple-Classifier/src/components/ConfigurationPanel/DecisionTree/vendors/decision-tree/style.less\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;;;CAiBC;ACED;EDAE,0DAA0D;EAC1D;gBACc;EACd,+CAA+C;EAC/C;mCACiC;EACjC,uDAAuD;EACvD,+CAA+C;EAC/C,8BAA8B;EAC9B,qEAAqE;EACrE,4BAA4B;EAC5B;aACW;AACb;ACbA;EAGM,SAAA;EACA,UAAA;ADaN;ACjBA;EAQI,iBAAA;EACE,kBAAA;EAEF,oBAAA;EACA,4BAAA;EACA,yBAAA;ADWJ;ACxBA;EAiBM,mBAAA;EACF,WAAA;EACE,kBAAA;EACF,qBAAA;EACA,kBAAA;EACA,uBAAA;EAEA,oBAAA;EACA,4BAAA;EACA,yBAAA;ADSJ;ACnCA;;EAgCI,WAAA;EACA,kBAAA;EACE,MAAA;EACA,UAAA;EACF,0BAAA;EACA,UAAA;EACE,YAAA;ADON;AC7CA;EAyCI,WAAA;EACE,SAAA;EACF,2BAAA;ADOJ;AClDA;;EAiDI,aAAA;ADKJ;ACtDA;EAsDM,cAAA;ADGN;ACzDA;;EA4DI,cAAA;ADCJ;AC7DA;EAgEI,4BAAA;EACA,wBAAA;EACA,gCAAA;EACA,6BAAA;ADAJ;ACnEA;EAsEI,wBAAA;EACA,gCAAA;EACA,6BAAA;ADAJ;ACxEA;EA6EI,WAAA;EACA,kBAAA;EACE,MAAA;EACA,SAAA;EACF,2BAAA;EACA,QAAA;EACE,YAAA;ADFN;ACjFA;EAuFI,sBAAA;EACA,iBAAA;EACA,qBAAA;EACA,WAAA;EACA,mCAAA;EACA,eAAA;EACA,qBAAA;EAEA,kBAAA;EACA,0BAAA;EACA,uBAAA;EAEA,oBAAA;EACA,4BAAA;EACA,yBAAA;ADLJ;AChGA;;EA2GI,mBAAA;EACE,WAAA;EACA,yBAAA;ADPN;ACtGA;;;;EAoHI,qBAAA;ADRJ\",\"file\":\"style.less\",\"sourcesContent\":[\"/*\\n Transforming nested lists to pretty tree\\n \\n <div class=\\\"tree\\\">\\n    <ul>\\n        <li>\\n            <ul>\\n            ...\\n            </ul>\\n        </li>\\n        ...\\n    </ul>\\n </div>\\n \\nSource: http://thecodeplayer.com/walkthrough/css3-family-tree\\n\\nSome other advices about displaying trees: http://stackoverflow.com/questions/1695115/how-do-i-draw-the-lines-of-a-family-tree-using-html-css\\n*/\\n.decision-tree-container {\\n  /*We will use ::before and ::after to draw the connectors*/\\n  /*We need to remove left-right connectors from elements without\\n   any siblings*/\\n  /*Remove space from the top of single children*/\\n  /*Remove left connector from first child and\\n   right connector from last child*/\\n  /*Adding back the vertical connector to the last nodes*/\\n  /*Time to add downward connectors from parents*/\\n  /*Time for some hover effects*/\\n  /*We will apply the hover effect the the lineage of the element also*/\\n  /*Connector styles on hover*/\\n  /*Thats all. I hope you enjoyed it.\\n   Thanks :)*/\\n}\\n.decision-tree-container * {\\n  margin: 0;\\n  padding: 0;\\n}\\n.decision-tree-container .tree ul {\\n  padding-top: 20px;\\n  position: relative;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li {\\n  white-space: nowrap;\\n  float: left;\\n  text-align: center;\\n  list-style-type: none;\\n  position: relative;\\n  padding: 20px 5px 0 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li::before,\\n.decision-tree-container .tree li::after {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  right: 50%;\\n  border-top: 1px solid #ccc;\\n  width: 50%;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li::after {\\n  right: auto;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n}\\n.decision-tree-container .tree li:only-child::after,\\n.decision-tree-container .tree li:only-child::before {\\n  display: none;\\n}\\n.decision-tree-container .tree li:only-child {\\n  padding-top: 0;\\n}\\n.decision-tree-container .tree li:first-child::before,\\n.decision-tree-container .tree li:last-child::after {\\n  border: 0 none;\\n}\\n.decision-tree-container .tree li:last-child::before {\\n  border-right: 1px solid #ccc;\\n  border-radius: 0 5px 0 0;\\n  -webkit-border-radius: 0 5px 0 0;\\n  -moz-border-radius: 0 5px 0 0;\\n}\\n.decision-tree-container .tree li:first-child::after {\\n  border-radius: 5px 0 0 0;\\n  -webkit-border-radius: 5px 0 0 0;\\n  -moz-border-radius: 5px 0 0 0;\\n}\\n.decision-tree-container .tree ul ul::before {\\n  content: '';\\n  position: absolute;\\n  top: 0;\\n  left: 50%;\\n  border-left: 1px solid #ccc;\\n  width: 0;\\n  height: 20px;\\n}\\n.decision-tree-container .tree li a {\\n  border: 1px solid #ccc;\\n  padding: 5px 10px;\\n  text-decoration: none;\\n  color: #666;\\n  font-family: arial, verdana, tahoma;\\n  font-size: 11px;\\n  display: inline-block;\\n  border-radius: 5px;\\n  -webkit-border-radius: 5px;\\n  -moz-border-radius: 5px;\\n  transition: all 0.5s;\\n  -webkit-transition: all 0.5s;\\n  -moz-transition: all 0.5s;\\n}\\n.decision-tree-container .tree li a:hover,\\n.decision-tree-container .tree li a:hover + ul li a {\\n  background: #c8e4f8;\\n  color: #000;\\n  border: 1px solid #94a0b4;\\n}\\n.decision-tree-container .tree li a:hover + ul li::after,\\n.decision-tree-container .tree li a:hover + ul li::before,\\n.decision-tree-container .tree li a:hover + ul::before,\\n.decision-tree-container .tree li a:hover + ul ul::before {\\n  border-color: #94a0b4;\\n}\\n\",\"/*\\n Transforming nested lists to pretty tree\\n \\n <div class=\\\"tree\\\">\\n    <ul>\\n        <li>\\n            <ul>\\n            ...\\n            </ul>\\n        </li>\\n        ...\\n    </ul>\\n </div>\\n \\nSource: http://thecodeplayer.com/walkthrough/css3-family-tree\\n\\nSome other advices about displaying trees: http://stackoverflow.com/questions/1695115/how-do-i-draw-the-lines-of-a-family-tree-using-html-css\\n*/\\n\\n.decision-tree-container {\\n  \\n  * {\\n      margin: 0;\\n      padding: 0;\\n  }\\n\\n  .tree ul {\\n    padding-top: 20px;\\n      position: relative;\\n\\n    transition: all 0.5s;\\n    -webkit-transition: all 0.5s;\\n    -moz-transition: all 0.5s;\\n  }\\n\\n  .tree li {\\n      white-space: nowrap;\\n    float: left;\\n      text-align: center;\\n    list-style-type: none;\\n    position: relative;\\n    padding: 20px 5px 0 5px;\\n\\n    transition: all 0.5s;\\n    -webkit-transition: all 0.5s;\\n    -moz-transition: all 0.5s;\\n  }\\n\\n  /*We will use ::before and ::after to draw the connectors*/\\n\\n  .tree li::before, .tree li::after{\\n    content: '';\\n    position: absolute;\\n      top: 0;\\n      right: 50%;\\n    border-top: 1px solid #ccc;\\n    width: 50%;\\n      height: 20px;\\n  }\\n  .tree li::after{\\n    right: auto;\\n      left: 50%;\\n    border-left: 1px solid #ccc;\\n  }\\n\\n  /*We need to remove left-right connectors from elements without\\n   any siblings*/\\n  .tree li:only-child::after, .tree li:only-child::before {\\n    display: none;\\n  }\\n\\n  /*Remove space from the top of single children*/\\n  .tree li:only-child{\\n      padding-top: 0;\\n  }\\n\\n  /*Remove left connector from first child and\\n   right connector from last child*/\\n  .tree li:first-child::before, .tree li:last-child::after{\\n    border: 0 none;\\n  }\\n  /*Adding back the vertical connector to the last nodes*/\\n  .tree li:last-child::before{\\n    border-right: 1px solid #ccc;\\n    border-radius: 0 5px 0 0;\\n    -webkit-border-radius: 0 5px 0 0;\\n    -moz-border-radius: 0 5px 0 0;\\n  }\\n  .tree li:first-child::after{\\n    border-radius: 5px 0 0 0;\\n    -webkit-border-radius: 5px 0 0 0;\\n    -moz-border-radius: 5px 0 0 0;\\n  }\\n\\n  /*Time to add downward connectors from parents*/\\n  .tree ul ul::before{\\n    content: '';\\n    position: absolute;\\n      top: 0;\\n      left: 50%;\\n    border-left: 1px solid #ccc;\\n    width: 0;\\n      height: 20px;\\n  }\\n\\n  .tree li a{\\n    border: 1px solid #ccc;\\n    padding: 5px 10px;\\n    text-decoration: none;\\n    color: #666;\\n    font-family: arial, verdana, tahoma;\\n    font-size: 11px;\\n    display: inline-block;\\n\\n    border-radius: 5px;\\n    -webkit-border-radius: 5px;\\n    -moz-border-radius: 5px;\\n\\n    transition: all 0.5s;\\n    -webkit-transition: all 0.5s;\\n    -moz-transition: all 0.5s;\\n  }\\n\\n  /*Time for some hover effects*/\\n  /*We will apply the hover effect the the lineage of the element also*/\\n  .tree li a:hover, .tree li a:hover+ul li a {\\n    background: #c8e4f8;\\n      color: #000;\\n      border: 1px solid #94a0b4;\\n  }\\n  /*Connector styles on hover*/\\n  .tree li a:hover+ul li::after,\\n  .tree li a:hover+ul li::before,\\n  .tree li a:hover+ul::before,\\n  .tree li a:hover+ul ul::before{\\n    border-color:  #94a0b4;\\n  }\\n\\n  /*Thats all. I hope you enjoyed it.\\n   Thanks :)*/\\n}\\n\"]}]);\n// Exports\nmodule.exports = exports;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.id, \"\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"DecisionTree.less\"}]);\n// Exports\nmodule.exports = exports;\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"DecisionTree\" }, [\n    _c(\n      \"button\",\n      {\n        staticClass: \"ui primary fluid button\",\n        attrs: { type: \"button\" },\n        on: { click: _vm.start }\n      },\n      [_vm._v(\"\\n    START\\n  \")]\n    )\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5e0e0496\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\", function() {\n     var newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\");\n     if(newContent.__esModule) newContent = newContent.default;\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","export * from \"-!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./DecisionTree.html?vue&type=template&id=6c7ee0fe&scoped=true&\"","let DecisionTree = {\r\n  props: ['config', 'localConfig', 'utils'],\r\n  data () {    \r\n    this.$i18n.locale = this.localConfig.locale\r\n    return {\r\n      model: null,\r\n      accuracy: null\r\n    }\r\n  },\r\n  watch: {\r\n    'localConfig.locale'() {\r\n      this.$i18n.locale = this.localConfig.locale;\r\n    },\r\n  },\r\n  computed: {\r\n    \r\n  },\r\n  mounted() {\r\n    setTimeout(() => {\r\n      this.start()\r\n    }, 1000)\r\n  },\r\n  methods: {}\r\n}\r\n\r\nimport DecisionTreeMethods from './DecisionTreeMethods.js'\r\nDecisionTreeMethods(DecisionTree)\r\n\r\nexport default DecisionTree","import mod from \"-!./DecisionTree.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!./DecisionTree.js?vue&type=script&lang=js&\"","export * from \"-!../../../../node_modules/vue-style-loader/index.js!../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\"","import { render, staticRenderFns } from \"./DecisionTree.html?vue&type=template&id=6c7ee0fe&scoped=true&\"\nimport script from \"./DecisionTree.js?vue&type=script&lang=js&\"\nexport * from \"./DecisionTree.js?vue&type=script&lang=js&\"\nimport style0 from \"./DecisionTree.less?vue&type=style&index=0&id=6c7ee0fe&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6c7ee0fe\",\n  null\n  \n)\n\n/* custom blocks */\nimport block0 from \"./DecisionTree.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=D%3A%5Cxampp%5Chtdocs%5Cprojects-html5%5CHTML-Simple-Classifier%5Csrc%5Ccomponents%5CConfigurationPanel%5CDecisionTree%5CDecisionTree.vue&lang=yaml\"\nif (typeof block0 === 'function') block0(component)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"D:\\\\xampp\\\\htdocs\\\\projects-html5\\\\HTML-Simple-Classifier\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6c7ee0fe')) {\n      api.createRecord('6c7ee0fe', component.options)\n    } else {\n      api.reload('6c7ee0fe', component.options)\n    }\n    module.hot.accept(\"./DecisionTree.html?vue&type=template&id=6c7ee0fe&scoped=true&\", function () {\n      api.rerender('6c7ee0fe', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/ConfigurationPanel/DecisionTree/DecisionTree.vue\"\nexport default component.exports","import mod from \"-!../../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DecisionTree.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=D%3A%5Cxampp%5Chtdocs%5Cprojects-html5%5CHTML-Simple-Classifier%5Csrc%5Ccomponents%5CConfigurationPanel%5CDecisionTree%5CDecisionTree.vue&lang=yaml\"; export default mod; export * from \"-!../../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DecisionTree.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=D%3A%5Cxampp%5Chtdocs%5Cprojects-html5%5CHTML-Simple-Classifier%5Csrc%5Ccomponents%5CConfigurationPanel%5CDecisionTree%5CDecisionTree.vue&lang=yaml\"","import dt from './vendors/decision-tree/decision-tree.webpack.js'\n\nexport default function (DecisionTree) {\n  DecisionTree.methods.start = async function () {\n    let data = await this.$parent.getJSONData()\n    this.model = this.buildModel(data.trainSet)\n    \n    let predictResults = await this.getPredictResults(this.model, data.testSet)\n    //console.log(predictResults)\n    this.$parent.setPredictResults(predictResults)\n  }\n  \n  DecisionTree.methods.buildModel = function (trainSet) {\n    \n    // Configuration\n    var config = {\n        trainingSet: trainSet, \n        categoryAttr: this.localConfig.classFieldName, \n        //ignoredAttributes: ['person']\n    };\n\n    // Building Decision Tree\n    return new dt.DecisionTree(config);\n  }\n  \n  DecisionTree.methods.getPredictResults = async function (model, testSet) {\n    let results = []\n    for (let len = testSet.length, i = len; i > 0; i--) {\n      let testCase = testSet[(len - i)]\n      //console.log(testCase)\n      let result = await model.predict(testCase)\n      results.push(result)\n      \n      if (i % 10 === 5) {\n        await this.utils.AsyncUtils.sleep(0)\n      }\n    }\n    \n    return results\n  }\n}","var dt = (function () {\n          \n    /**\n     * Creates an instance of DecisionTree\n     *\n     * @constructor\n     * @param builder - contains training set and\n     *                  some configuration parameters\n     */\n    function DecisionTree(builder) {\n      (async () => {\n        this.inited = false\n        //console.log('準備')\n        this.root = await buildDecisionTree({\n            trainingSet: builder.trainingSet,\n            ignoredAttributes: arrayToHashSet(builder.ignoredAttributes),\n            categoryAttr: builder.categoryAttr || 'category',\n            minItemsCount: builder.minItemsCount || 1,\n            entropyThrehold: builder.entropyThrehold || 0.01,\n            maxTreeDepth: builder.maxTreeDepth || 70\n        })\n        //console.log('完成')\n        this.inited = true\n      })()\n    }\n          \n    DecisionTree.prototype.predict = async function (item) {\n      //console.log(item)\n      while (this.inited === false) {\n        await sleep(50)\n      }\n      //console.log(item)\n      return predict(this.root, item);\n    }\n\n    /**\n     * Creates an instance of RandomForest\n     * with specific number of trees\n     *\n     * @constructor\n     * @param builder - contains training set and some\n     *                  configuration parameters for\n     *                  building decision trees\n     */\n    function RandomForest(builder, treesNumber) {\n        this.trees = buildRandomForest(builder, treesNumber);\n    }\n          \n    RandomForest.prototype.predict = function (item) {\n        return predictRandomForest(this.trees, item);\n    }\n    \n    /**\n     * Transforming array to object with such attributes \n     * as elements of array (afterwards it can be used as HashSet)\n     */\n    function arrayToHashSet(array) {\n        var hashSet = {};\n        if (array) {\n            for(var i in array) {\n                var attr = array[i];\n                hashSet[attr] = true;\n            }\n        }\n        return hashSet;\n    }\n    \n    /**\n     * Calculating how many objects have the same \n     * values of specific attribute.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute, \n     *                which embedded in each object\n     */\n    function countUniqueValues(items, attr) {\n        var counter = {};\n\n        // detecting different values of attribute\n        for (var i = items.length - 1; i >= 0; i--) {\n            // items[i][attr] - value of attribute\n            counter[items[i][attr]] = 0;\n        }\n          \n        // counting number of occurrences of each of values\n        // of attribute\n        for (var i = items.length - 1; i >= 0; i--) {\n            counter[items[i][attr]] += 1;\n        }\n\n        return counter;\n    }\n    \n    /**\n     * Calculating entropy of array of objects \n     * by specific attribute.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute, \n     *                which embedded in each object\n     */\n    function entropy(items, attr) {\n        // counting number of occurrences of each of values\n        // of attribute\n        var counter = countUniqueValues(items, attr);\n\n        var entropy = 0;\n        var p;\n        for (var i in counter) {\n            p = counter[i] / items.length;\n            entropy += -p * Math.log(p);\n        }\n\n        return entropy;\n    }\n          \n    /**\n     * Splitting array of objects by value of specific attribute, \n     * using specific predicate and pivot.\n     *\n     * Items which matched by predicate will be copied to \n     * the new array called 'match', and the rest of the items \n     * will be copied to array with name 'notMatch'\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute,\n     *                which embedded in each object\n     *\n     * @param predicate - function(x, y) \n     *                    which returns 'true' or 'false'\n     *\n     * @param pivot - used as the second argument when \n     *                calling predicate function:\n     *                e.g. predicate(item[attr], pivot)\n     */\n    function split(items, attr, predicate, pivot) {\n        var match = [];\n        var notMatch = [];\n\n        var item,\n            attrValue;\n          \n        for (var i = items.length - 1; i >= 0; i--) {\n            item = items[i];\n            attrValue = item[attr];\n\n            if (predicate(attrValue, pivot)) {\n                match.push(item);\n            } else {\n                notMatch.push(item);\n            }\n        };\n\n        return {\n            match: match,\n            notMatch: notMatch\n        };\n    }\n\n    /**\n     * Finding value of specific attribute which is most frequent\n     * in given array of objects.\n     *\n     * @param items - array of objects\n     *\n     * @param attr  - variable with name of attribute, \n     *                which embedded in each object\n     */\n    function mostFrequentValue(items, attr) {\n        // counting number of occurrences of each of values\n        // of attribute\n        var counter = countUniqueValues(items, attr);\n\n        var mostFrequentCount = 0;\n        var mostFrequentValue;\n\n        for (var value in counter) {\n            if (counter[value] > mostFrequentCount) {\n                mostFrequentCount = counter[value];\n                mostFrequentValue = value;\n            }\n        };\n\n        return mostFrequentValue;\n    }\n          \n    var predicates = {\n        '==': function (a, b) { return a == b },\n        '>=': function (a, b) { return a >= b }\n    };\n    \n    function sleep (ms = 500) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    /**\n     * Function for building decision tree\n     */\n    async function buildDecisionTree(builder) {\n\n        var trainingSet = builder.trainingSet;\n        var minItemsCount = builder.minItemsCount;\n        var categoryAttr = builder.categoryAttr;\n        var entropyThrehold = builder.entropyThrehold;\n        var maxTreeDepth = builder.maxTreeDepth;\n        var ignoredAttributes = builder.ignoredAttributes;\n\n        if ((maxTreeDepth === 0) || (trainingSet.length <= minItemsCount)) {\n            // restriction by maximal depth of tree\n            // or size of training set is to small\n            // so we have to terminate process of building tree\n            return {\n                category: mostFrequentValue(trainingSet, categoryAttr)\n            };\n        }\n\n        var initialEntropy = entropy(trainingSet, categoryAttr);\n\n        if (initialEntropy <= entropyThrehold) {\n            // entropy of training set too small\n            // (it means that training set is almost homogeneous),\n            // so we have to terminate process of building tree\n            return {\n                category: mostFrequentValue(trainingSet, categoryAttr)\n            };\n        }\n\n        // used as hash-set for avoiding the checking of split by rules\n        // with the same 'attribute-predicate-pivot' more than once\n        var alreadyChecked = {};\n          \n        // this variable expected to contain rule, which splits training set\n        // into subsets with smaller values of entropy (produces informational gain)\n        var bestSplit = {gain: 0};\n\n        for (var i = trainingSet.length - 1; i >= 0; i--) {\n            var item = trainingSet[i];\n\n            // iterating over all attributes of item\n            for (var attr in item) {\n                if ((attr === categoryAttr) || ignoredAttributes[attr]) {\n                    continue;\n                }\n\n                // let the value of current attribute be the pivot\n                var pivot = item[attr];\n\n                // pick the predicate\n                // depending on the type of the attribute value\n                var predicateName;\n                if (typeof pivot === 'number') {\n                    predicateName = '>=';\n                } else {\n                    // there is no sense to compare non-numeric attributes\n                    // so we will check only equality of such attributes\n                    predicateName = '==';\n                }\n\n                var attrPredPivot = attr + predicateName + pivot;\n                if (alreadyChecked[attrPredPivot]) {\n                    // skip such pairs of 'attribute-predicate-pivot',\n                    // which been already checked\n                    continue;\n                }\n                alreadyChecked[attrPredPivot] = true;\n\n                var predicate = predicates[predicateName];\n          \n                // splitting training set by given 'attribute-predicate-value'\n                var currSplit = split(trainingSet, attr, predicate, pivot);\n\n                // calculating entropy of subsets\n                var matchEntropy = entropy(currSplit.match, categoryAttr);\n                var notMatchEntropy = entropy(currSplit.notMatch, categoryAttr);\n\n                // calculating informational gain\n                var newEntropy = 0;\n                newEntropy += matchEntropy * currSplit.match.length;\n                newEntropy += notMatchEntropy * currSplit.notMatch.length;\n                newEntropy /= trainingSet.length;\n                var currGain = initialEntropy - newEntropy;\n\n                if (currGain > bestSplit.gain) {\n                    // remember pairs 'attribute-predicate-value'\n                    // which provides informational gain\n                    bestSplit = currSplit;\n                    bestSplit.predicateName = predicateName;\n                    bestSplit.predicate = predicate;\n                    bestSplit.attribute = attr;\n                    bestSplit.pivot = pivot;\n                    bestSplit.gain = currGain;\n                }\n            }\n          \n          if (i % 10 === 5) {\n            await sleep(0)\n          }\n            \n        } // for (var i = trainingSet.length - 1; i >= 0; i--) {\n        \n        \n\n        if (!bestSplit.gain) {\n            // can't find optimal split\n            return { category: mostFrequentValue(trainingSet, categoryAttr) };\n        }\n\n        // building subtrees\n          \n        builder.maxTreeDepth = maxTreeDepth - 1;\n\n        builder.trainingSet = bestSplit.match;\n        var matchSubTree = await buildDecisionTree(builder);\n\n        builder.trainingSet = bestSplit.notMatch;\n        var notMatchSubTree = await buildDecisionTree(builder);\n\n        return {\n            attribute: bestSplit.attribute,\n            predicate: bestSplit.predicate,\n            predicateName: bestSplit.predicateName,\n            pivot: bestSplit.pivot,\n            match: matchSubTree,\n            notMatch: notMatchSubTree,\n            matchedCount: bestSplit.match.length,\n            notMatchedCount: bestSplit.notMatch.length\n        };\n    }\n\n    /**\n     * Classifying item, using decision tree\n     */\n    function predict(tree, item) {\n        var attr,\n            value,\n            predicate,\n            pivot;\n        \n        \n        if (!tree) {\n          return undefined\n        }\n        \n        // Traversing tree from the root to leaf\n        while(true) {\n          \n            if (tree.category) {\n                // only leafs contains predicted category\n                return tree.category;\n            }\n\n            attr = tree.attribute;\n            value = item[attr];\n\n            predicate = tree.predicate;\n            if (!predicate) {\n              return undefined\n            }\n            pivot = tree.pivot;\n\n            // move to one of subtrees\n            if (predicate(value, pivot)) {\n                tree = tree.match;\n            } else {\n                tree = tree.notMatch;\n            }\n        }\n    }\n\n    /**\n     * Building array of decision trees\n     */\n    function buildRandomForest(builder, treesNumber) {\n        var items = builder.trainingSet;\n          \n        // creating training sets for each tree\n        var trainingSets = [];\n        for (var t = 0; t < treesNumber; t++) {\n            trainingSets[t] = [];\n        }\n        for (var i = items.length - 1; i >= 0 ; i--) {\n          // assigning items to training sets of each tree\n          // using 'round-robin' strategy\n          var correspondingTree = i % treesNumber;\n          trainingSets[correspondingTree].push(items[i]);\n        }\n\n        // building decision trees\n        var forest = [];\n        for (var t = 0; t < treesNumber; t++) {\n            builder.trainingSet = trainingSets[t];\n\n            var tree = new DecisionTree(builder);\n            forest.push(tree);\n        }\n        return forest;\n    }\n\n    /**\n     * Each of decision tree classifying item\n     * ('voting' that item corresponds to some class).\n     *\n     * This function returns hash, which contains \n     * all classifying results, and number of votes \n     * which were given for each of classifying results\n     */\n    function predictRandomForest(forest, item) {\n        var result = {};\n        for (var i in forest) {\n            var tree = forest[i];\n            var prediction = tree.predict(item);\n            result[prediction] = result[prediction] ? result[prediction] + 1 : 1;\n        }\n        return result;\n    }\n\n    var exports = {};\n    exports.DecisionTree = DecisionTree;\n    exports.RandomForest = RandomForest;\n    return exports;\n})();\n\nexport default dt","import dt from './decision-tree.js'\nimport './style.less'\n\nexport default dt","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./style.less\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"bfdcd938\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./style.less\", function() {\n     var newContent = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js?sourceMap!../../../../../../node_modules/less-loader/dist/cjs.js??ref--1-2!./style.less\");\n     if(newContent.__esModule) newContent = newContent.default;\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}